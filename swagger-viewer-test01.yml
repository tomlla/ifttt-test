openapi: "3.0.0"
info:
  title: swagger-viewer test
  description: |
    swagger-viewer is chrome extensin that can be preview Swager UI
    original repository is `https://github.com/arx-8/swagger-viewer`
  version: 1.0.0
  contact:
    name: "Swagger Virewer Chrome Extension"
    url: https://github.com/tomlla/swagger-viewer

servers:
  - url: "https://staging.example.com"
  - url: "http://localhost:{port}"
    variables:
      port:
        enum:
          - "18080"
          - "8080"
        default: "18080"

# security:
#   - foobarAuth: []
tags:
  - name: article
  - name: user

paths:
  /api/v1/xxx:
    put:
      tags:
        - article
      description: |
        [Idempotent API] ...
        Idempotent key: ... (...)
      requestBody:
        $ref: "#/components/requestBodies/ArticalRequest"
      responses:
        "200":
          description: Empty response. (API calli succeeded. There is no meaningfull data)
        "400":
          description: "validation error, or request is something wrong (don't retry)"
        "500":
          description: Unexpected Error.

  /api/v1/yyy:
    put:
      tags:
        - user
      description: |
        [Idempotent API] ....
        Idempotent key: userUuid
      requestBody:
        $ref: "#/components/requestBodies/RegisteredUserRequest"
      responses:
        "200":
          description: Empty response. (API calli succeeded. There is no meaningfull data)
        "400":
          description: "validation error, or request is something wrong (don't retry)"
        "500":
          description: Unexpected Error.

components:
  securitySchemes:
    foobarAuth:
      type: apiKey
      name: RAKUSHIFU-API-KEY
      in: header #  can specify one of "header", "query" or "cookie".

  requestBodies:
    ArticalRequest:
      description: Article Playload
      content:
        application/json:
          schema:
            type: object
            required:
              - workSpan
              - submittedAt
              - articles
            properties:
              workSpan:
                $ref: "#/components/schemas/Span"
              submittedAt:
                type: string
                format: date-time
              articles:
                type: array
                items:
                  $ref: "#/components/schemas/Attend"

    RegisteredUserRequest:
      content:
        application/json:
          schema:
            description: |
              "userUuid" is generated by ...
            type: object
            required:
              - lineId
              - userUuid
              - positionId
              - name
              - birthday
              - registeredAt
            properties:
              userUuid:
                type: string
                format: uuid
              lineId:
                type: string
                example: "U523515219782b2XXXXXXXXXXXXXXXX"
              positionId:
                type: string
                example: "100001"
                description: "int64, but written as string on json"
              name:
                type: string
                example: "らくしふ太郎"
              birthday:
                type: string
                format: date
                example: "YYYY-MM-DD"
              registeredAt:
                type: string
                format: date-time

  schemas:
    Span:
      type: object
      description: |
        "userUuid" is generated by ....
      required:
        - userId
        - workPeriodId
        - storeId
        - positionId
      properties:
        userUuid:
          type: string
        workPeriodId:
          type: string
          example: "100001"
          description: "int64, but written as string on json"
        storeId:
          type: string
          example: "100001"
          description: "int64, but written as string on json"
        positionId:
          type: string
          example: "100001"
          description: "int64, but written as string on json"

    Attend:
      type: object
      required:
        - date
        - startHour
        - startMinute
        - endHour
        - endMinute
      properties:
        date:
          type: string
          format: date
          example: "2020-02-29"
        startHour:
          type: integer
          example: 18
        startMinute:
          type: integer
          example: 0
        endHour:
          type: integer
          example: 26
        endMinute:
          type: integer
          example: 45
        memo:
          type: string
